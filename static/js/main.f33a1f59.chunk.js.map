{"version":3,"sources":["components/PostsList/PostsList.tsx","api/api.ts","api/comment.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/user.ts","api/post.ts","index.tsx"],"names":["PostsList","posts","selectedPostId","handleSelectedPostId","className","map","post","userId","title","type","value","id","onClick","BASE_URL","get","url","fetch","then","res","json","getCommentsByPostId","postId","deletePostComment","commentId","method","postComment","newComment","newPost","headers","body","JSON","stringify","NewCommentForm","setComments","useState","userName","setUserName","userEmail","setUserEmail","userComment","setUserComment","onFormSubmit","event","a","preventDefault","name","email","updatedComments","onSubmit","placeholder","onChange","target","PostDetails","comments","errorWithComments","setErrorWithComments","isCommentVisible","setCommentVisibility","useEffect","getCommentsServer","commentFromServer","onDeletindComment","useCallback","filteredComments","filter","comment","App","users","setUsers","selectedUserId","setSelectedUserId","setPosts","setSelectedPostId","openPostDetails","setopenPostDetails","failedToloadPosts","setFailedToloadPosts","getDataFromServer","usersFromServer","getPostsByUserFromServer","postsFromServer","user","chosenPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f33a1f59.chunk.js","sourcesContent":["import React from 'react';\nimport Post from '../types/Post';\nimport './PostsList.scss';\n\ninterface Props{\n  posts: Post[];\n  selectedPostId: number,\n  handleSelectedPostId: (postId: number) => void,\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId,\n  handleSelectedPostId,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>\n                [User #\n                {' '}\n                {post.userId}\n                ]:\n                {' '}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              value={post.id}\n              onClick={() => (\n                handleSelectedPostId(post.id))}\n            >\n              { selectedPostId === post.id ? ('Close') : ('Open')}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import Comment from '../components/types/Comment';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\nexport function get<T>(url: string): Promise<T> {\n  return fetch(BASE_URL + url)\n    .then(res => res.json());\n}\n\nexport function remove<T>(url: string): Promise<T> {\n  return fetch(BASE_URL + url, { method: 'DELETE' })\n    .then(res => res.json());\n}\n\nexport function post<T>(url: string, newPost: Comment): Promise<T> {\n  return fetch(BASE_URL + url,\n    {\n      method: 'POST',\n      headers: { 'Content-type': 'application/json; charset=UTF-8' },\n      body: JSON.stringify(newPost),\n    }).then(res => res.json());\n}\n","import { get, post, remove } from './api';\nimport Comment from '../components/types/Comment';\n\nexport const getCommentsByPostId = (postId: number): Promise<Comment[]> => {\n  return get(`/comments?postId=${postId}`);\n};\n\nexport const deletePostComment = (commentId: number): Promise<Comment> => {\n  return remove(`/comments/${commentId}`);\n};\n\nexport function postComment(newComment: Comment) {\n  return post('/comments', newComment);\n}\n","import React, { FormEvent, useState } from 'react';\nimport './NewCommentForm.scss';\nimport Comment from '../types/Comment';\nimport { getCommentsByPostId, postComment } from '../../api/comment';\n\ninterface Props {\n  postId: number,\n  setComments: (comments: Comment[]) => void\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, setComments }) => {\n  const [userName, setUserName] = useState<string>('');\n  const [userEmail, setUserEmail] = useState<string>('');\n  const [userComment, setUserComment] = useState<string>('');\n\n  const clearForm = () => {\n    setUserName('');\n    setUserEmail('');\n    setUserComment('');\n  };\n\n  const onFormSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment = {\n      postId,\n      name: userName,\n      email: userEmail,\n      body: userComment,\n    };\n\n    await postComment(newComment);\n\n    const updatedComments = await getCommentsByPostId(postId);\n\n    setComments(updatedComments);\n\n    clearForm();\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={onFormSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={userName}\n          onChange={(event) => setUserName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={userEmail}\n          onChange={(event) => setUserEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={userComment}\n          onChange={(event) => setUserComment(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { deletePostComment, getCommentsByPostId } from '../../api/comment';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport Comment from '../types/Comment';\n\ninterface Props {\n  postId: number;\n}\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [errorWithComments, setErrorWithComments] = useState(false);\n  const [isCommentVisible, setCommentVisibility] = useState(true);\n\n  useEffect(() => {\n    const getCommentsServer = async () => {\n      try {\n        const commentFromServer = await getCommentsByPostId(postId);\n\n        setComments(commentFromServer);\n      } catch {\n        setErrorWithComments(true);\n      }\n    };\n\n    getCommentsServer();\n  }, [postId]);\n\n  const onDeletindComment = useCallback(async (id) => {\n    await deletePostComment(id);\n\n    const filteredComments = [...comments].filter(\n      comment => comment.id !== id,\n    );\n\n    await setComments(filteredComments);\n  }, [comments]);\n\n  const handleComments = () => {\n    setCommentVisibility(!isCommentVisible);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>sunt aut facere repellat provident occaecati excepturi optio</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={handleComments}\n        >\n          {isCommentVisible ? ('Show comments') : ('Hide comments')}\n        </button>\n        {errorWithComments && <p>Failed to Load Comments</p>}\n        {isCommentVisible\n            && (\n              <ul className=\"PostDetails__list\">\n                {comments.map(comment => (\n                  <li\n                    className=\"PostDetails__list-item\"\n                    key={comment.id}\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"PostDetails__remove-button button\"\n                      onClick={() => onDeletindComment(comment.id)}\n                    >\n                      X\n                    </button>\n                    <p>{comment.name}</p>\n                  </li>\n                ))}\n              </ul>\n            )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            setComments={setComments}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport User from './components/types/User';\nimport { getUsers } from './api/user';\n// import { getCommentsByPostId } from './api/comment';\nimport Post from './components/types/Post';\nimport { getPostsByUserID } from './api/post';\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [openPostDetails, setopenPostDetails] = useState(false);\n  const [failedToloadPosts, setFailedToloadPosts] = useState(false);\n\n  useEffect(() => {\n    const getDataFromServer = async () => {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    };\n\n    getDataFromServer();\n  }, []);\n\n  const handleSelectedUserId = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  useEffect(() => {\n    const getPostsByUserFromServer = async () => {\n      try {\n        const postsFromServer = await getPostsByUserID(selectedUserId);\n\n        setPosts(postsFromServer);\n      } catch {\n        setFailedToloadPosts(true);\n      }\n    };\n\n    getPostsByUserFromServer();\n  }, [selectedUserId]);\n\n  const handleSelectedPostId = (chosenPostId: number) => {\n    setSelectedPostId(chosenPostId);\n    setopenPostDetails(!openPostDetails);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={handleSelectedUserId}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n        {failedToloadPosts && (\n          <p>Failed to load users</p>\n        )}\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            handleSelectedPostId={handleSelectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {openPostDetails && <PostDetails postId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { get } from './api';\nimport User from '../components/types/User';\n\nexport const getUsers = (): Promise<User[]> => {\n  return get<User[]>('/users');\n};\n","import { get } from './api';\nimport Post from '../components/types/Post';\n\nexport const getPostsByUserID = (id: number): Promise<Post[]> => {\n  if (!id) {\n    return get('/posts');\n  }\n\n  return get(`/posts?userId=${id}`);\n};\n\nexport const getPost = (): Promise<Post[]> => {\n  return get('/posts');\n};\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}